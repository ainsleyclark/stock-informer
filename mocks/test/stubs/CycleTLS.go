// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	cycletls "github.com/Danny-Dasilva/CycleTLS/cycletls"
	mock "github.com/stretchr/testify/mock"
)

// CycleTLS is an autogenerated mock type for the CycleTLS type
type CycleTLS struct {
	mock.Mock
}

// Do provides a mock function with given fields: _a0, _a1, _a2
func (_m *CycleTLS) Do(_a0 string, _a1 cycletls.Options, _a2 string) (cycletls.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 cycletls.Response
	if rf, ok := ret.Get(0).(func(string, cycletls.Options, string) cycletls.Response); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(cycletls.Response)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, cycletls.Options, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCycleTLS interface {
	mock.TestingT
	Cleanup(func())
}

// NewCycleTLS creates a new instance of CycleTLS. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCycleTLS(t mockConstructorTestingTNewCycleTLS) *CycleTLS {
	mock := &CycleTLS{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
